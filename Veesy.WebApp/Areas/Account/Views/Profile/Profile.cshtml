@model Veesy.Presentation.Model.Account.ProfileViewModel

@{
    ViewData["Title"] = "Profile";
}

<div class="d-flex pt-7rem">
    <div class="col-2 col-sm-12 col-md-3">
        <div class="ps-3">
            <nav class="breadcrumb-container" aria-label="Percorso di navigazione">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><i class="fa-solid fa-house me-2"></i><a class="breadcrumb-a me-2" asp-action="Index" asp-area="Portfolio" asp-controller="Home">dashboard</a><i class="fa-solid fa-chevron-right"></i></li>
                    <li class="breadcrumb-item"><a class="breadcrumb-a" href="#"><strong>portfolio</strong></a></li>
                </ol>
            </nav>
            <div class="w-75 card-white-veesy p-3">
                <div class="d-flex">
                    <div class="col-3">
                        <div class="text-center">
                            @if (string.IsNullOrEmpty(@Model.FileName))
                            {
                                <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrVmYaV8ReWhTf5aMtZgkI__Mf9iCStzIShCMY-EzO-s05kD81VTb5ZtLnz5CiqB1LXu4&usqp=CAU" class="img-thumbnail rounded-circle" alt="user-image" style="max-width: none!important; width: 60px !important; height: 60px !important;">
                            }
                            else
                            {
                                <img src="@Model.BasePathImages@Model.FileName" style="width: 60px !important; height: 60px !important; max-width: none!important; " class="img-thumbnail rounded-circle" alt="user-image">
                            }
                        </div>
                    </div>
                    <div class="col-8"><p class="ms-2"><strong>@Model.Username</strong></p></div>
                    <div class="col-1"><div class="text-end"><i class="fa-solid fa-circle fa-2xs" style="color: #202F4D;"></i></div></div>
                </div>
                <h5 class="mt-4 mb-4">@Model.FullName</h5>
                @{
                    var workrole = "information missing";
                    var role_css = "text-danger";
                    if (Model.CategoriesWork.Count(s => s.Selected) > 0)
                    {
                        role_css = "";
                        workrole = Model.CategoriesWork.FirstOrDefault(s => s.Selected).Name;
                    }
                }
                <div class="d-flex"><p class="mb-0"><strong>Role:&nbsp;</strong></p><p class="@role_css mb-0">@workrole</p></div>
                <div class="d-flex"><p class="mb-0"><strong>Email:&nbsp;</strong></p><p class="mb-0">@Model.Email</p></div>
                @{
                    var phone = "information missing";
                    var css = "text-danger";
                    if (!string.IsNullOrEmpty(Model.PhoneNumber))
                    {
                        css = "";
                        phone = Model.PhoneNumber;
                    }
                }
                <div class="d-flex"><p class="mb-0"><strong>Phone:&nbsp;</strong></p><p class="@css mb-0">@phone</p></div>
                <div class="mt-4"><a asp-controller="Profile" asp-area="Account" asp-action="BasicInfo" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit basic info</strong></a></div>
            </div>
        </div>
    </div>
    <div class="col-8 col-md-6">
        <h3>Your Profile</h3>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <a class="grey-link ms-2"><strong>learn more <i class="fa-solid fa-arrow-up-right-from-square"></i></strong></a></p>
        <div class="empty-veesy"></div>
        <h4>General</h4>
        <div class="d-flex">
            <div class="col-sm-12 col-md-6 col-lg-6 me-2">
                <hr class="hr"/>
                <div class="d-flex">
                    @if (Model.CategoriesWork.Count(s => s.Selected) == 0)
                    {
                        <div class="col-9">
                            <p class="mb-0"><strong>Role:</strong></p>
                            <p class="mb-0 color-red">Information missing</p>
                        </div>
                        <div class="col-3 text-end"><a onclick="openModal('#modalWorkRole')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add info</strong></a></div>
                    }
                    else
                    {
                        <div class="col-9">
                            <p class="mb-0"><strong>Role:</strong></p>
                            <p class="mb-0">
                                @{
                                    var roles = "";
                                    foreach (var role in Model.CategoriesWork.Where(s => s.Selected))
                                    {
                                        roles += $"{@role.Name}, ";
                                    }
                                }
                                @roles
                            </p>
                        </div>
                        <div class="col-3 text-end"><a onclick="openModal('#modalWorkRole')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a></div>
                    }
                </div>
                <hr class="hr"/>
                <div class="d-flex">
                    @if (string.IsNullOrEmpty(Model.ExternalLink))
                    {
                        <div class="col-9">
                            <p class="mb-0"><strong>External link:</strong></p>
                            <p class="mb-0 color-red">Information missing</p>
                        </div>
                        <div class="col-3 text-end"><a onclick="openModal('#modalExternalLink')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add info</strong></a></div>
                    }
                    else
                    {
                        <div class="col-9">
                            <p class="mb-0"><strong>External link:</strong></p>
                            <a href="https://@Model.ExternalLink" target="_blank" class="mb-0">@Model.ExternalLink</a>
                        </div>
                        <div class="col-3 text-end"><a onclick="openModal('#modalExternalLink'), setTextAreaValue('external-link-edit', '@Model.ExternalLink')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a></div>
                    }
                </div>
                <hr class="hr"/>
            </div>
            <div class="col-sm-12 col-md-6 ms-2">
                <hr class="hr"/>
                <div class="d-flex">
                        @if (Model.LanguagesSpoken.Count(s => s.Selected) == 0)
                        {
                            <div class="col-9">
                                <p class="mb-0"><strong>Language Spoken:</strong></p>
                                <p class="mb-0 color-red">Information missing</p>
                            </div>
                            <div class="col-3 text-end"><a onclick="openModal('#modalLanguageSpoken')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add info</strong></a></div>
                        }
                        else
                        {
                            <div class="col-9">
                                <p class="mb-0"><strong>Language Spoken:</strong></p>
                                <p class="mb-0">
                                    @{
                                        var languages = "";
                                        foreach (var language in Model.LanguagesSpoken.Where(s => s.Selected))
                                        {
                                            languages += $"{language.Language}, ";
                                        }
                                    }
                                    @languages
                                </p>
                            </div>
                            <div class="col-3 text-end"><a onclick="openModal('#modalLanguageSpoken')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a></div>
                        }
                </div>
                <hr class="hr"/>
                <div class="d-flex">
                        @if (Model.InfoToShow.Count(s => s.Selected) == 0)
                        {
                            <div class="col-9">
                                <p class="mb-0"><strong>Show Profile info:</strong></p>
                                <p class="mb-0 color-red">Information missing</p>
                            </div>
                            <div class="col-3 text-end"><a onclick="openModal('#modalInfoToShow')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add info</strong></a></div>
                        }
                        else
                        {
                            <div class="col-9">
                                <p class="mb-0"><strong>Show Profile info:</strong></p>
                                <p class="mb-0">
                                    @{
                                        var infos = "";
                                        foreach (var info in Model.InfoToShow.Where(s => s.Selected))
                                        {
                                            infos += $"{info.Name}, ";
                                        }
                                    }
                                    @infos
                                </p>
                            </div>
                            <div class="col-3 text-end"><a onclick="openModal('#modalInfoToShow')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a></div>
                        }
                </div>
                <hr class="hr"/>
            </div>
        </div>
        <div class="empty-veesy"></div>
        <div>
            <h4>Portfolio intro</h4>
            @if (string.IsNullOrEmpty(Model.PortfolioIntro))
            {
                <div class="card-white-dashed-veesy p-3">
                    <p>Write a short info about yourself, try to make it <strong>brief</strong> and <strong>catchy</strong></p>
                    <div class="mt-4"><a onclick="openModal('#modalPortfolioIntro')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add portfolio intro</strong></a></div>
                </div>
            }
            else
            {
                <p>@Model.PortfolioIntro</p>
                <a onclick="openModal('#modalPortfolioIntro'), setTextAreaValue('portfolio-intro-text-edit', '@Model.PortfolioIntro')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a>

            }
        </div>
        <div class="empty-veesy"></div>
        <div>
            <h4>Biografy</h4>
            @if (string.IsNullOrEmpty(Model.Biography))
            {
                <div class="card-white-dashed-veesy p-3">
                    <p>Write a bio about yourself, try to make it <strong>synthetic</strong> and <strong>professional</strong></p>
                    <div class="mt-4"><a onclick="openModal('#modalBiography')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add bio</strong></a></div>
                </div>
            }
            else
            {
                <p>@Model.Biography</p>
                <a onclick="openModal('#modalBiography'), setTextAreaValue('biography-text-edit', '@Model.Biography')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a>

            }
        </div>
        <div class="empty-veesy"></div>
        <div>
            <h4>Hard Skills</h4>
            <p>Lorem ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries,</p>
            @if (Model.HardSkills.Count(s => s.Selected) > 0)
            {
                <div class="d-flex mb-4">
                @foreach (var item in Model.HardSkills.Where(s => s.Selected))
                {
                        <div class="pe-3 ps-3 div-white-rounded-blue-veesy d-flex"><a onclick="openModal('#modalHardSkill')"><i class="fa-solid fa-circle pe-2" style="color: #75CCDD"></i>@item.Name</a></div>
                }
                </div>
                <a onclick="openModal('#modalHardSkill')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a>

            }
            else
            {
                <div class="d-flex">
                    <a onclick="openModal('#modalHardSkill')" class="button-white-dashed-veesy">+</a>
                    <a onclick="openModal('#modalHardSkill')" class="button-white-dashed-veesy">+</a>
                    <a onclick="openModal('#modalHardSkill')" class="button-white-dashed-veesy">+</a>
                </div>
                <div class="mt-2"><a onclick="openModal('#modalHardSkill')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add hard skills</strong></a></div>
            }
        </div>
        <div class="empty-veesy"></div>
        <div>
            <h4>Soft Skills</h4>
            <p>Lorem ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries,</p>
            @if (Model.SoftSkills.Count(s => s.Selected) > 0)
            {
                <div class="d-flex mb-4">
                @foreach (var item in Model.SoftSkills.Where(s => s.Selected))
                {
                        <div class="pe-3 ps-3 div-white-rounded-blue-veesy d-flex"><a onclick="openModal('#modalSoftSkill')" ><i class="fa-solid fa-circle pe-2" style="color: #75CCDD"></i>@item.Name</a></div>
                }
                </div>
                <a onclick="openModal('#modalSoftSkill')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a>

            }
            else
            {
                <div class="d-flex">
                    <a onclick="openModal('#modalSoftSkill')" class="button-white-dashed-veesy">+</a>
                    <a onclick="openModal('#modalSoftSkill')" class="button-white-dashed-veesy">+</a>
                    <a onclick="openModal('#modalSoftSkill')" class="button-white-dashed-veesy">+</a>
                </div>
                <div class="mt-2"><a onclick="openModal('#modalSoftSkill')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add soft skills</strong></a></div>
            }
        </div>
        <div class="empty-veesy"></div>
        <div>
            <h4>Softwares</h4>
            <p>Lorem ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries,</p>
            @if (Model.UsedSoftwares.Count(s => s.Selected) > 0)
            {
                <div class="d-flex mb-4">
                @foreach (var item in Model.UsedSoftwares.Where(s => s.Selected))
                {
                        <div class="pe-3 ps-3 div-white-rounded-veesy">@item.Name</div>
                }
                </div>
                <a onclick="openModal('#modalSoftware')" class="grey-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>edit</strong></a>

            }
            else
            {
                <div class="d-flex">
                    <button class="button-white-dashed-veesy">+</button>
                    <button class="button-white-dashed-veesy">+</button>
                    <button class="button-white-dashed-veesy">+</button>
                </div>
                <div class="mt-2"><a onclick="openModal('#modalSoftware')" class="red-link"><i class="fa-regular fa-pen-to-square pe-1"></i><strong>add softwares</strong></a></div>
            }
        </div>
        <div class="empty-veesy"></div>
        <div>
            <h4>Portfolios</h4>
            <p>You don't have any portfolio yet.</p>
            <button class="rounded-pill btn btn-primary">create your first portfolio</button>
        </div>
        <div class="empty-veesy"></div>
    </div>
    <div class="col-2 col-md-3">
        <div class="d-flex justify-content-center">
            <div style="position: fixed">
                <div class="w-125 card-blue-veesy p-3">
                    <div class="text-end"><i class="fa-solid fa-circle fa-2xs" style="color: #ffffff;"></i></div>
                    <p class="mb-0" style="color: white"><strong>Do you need some help?</strong></p>
                    <a class="a-ciano" href="#">Contact us</a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="modalBiography" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Biography</h5>
                <a onclick="closeModal('#modalBiography')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Write a bio about yourself, try to make it synthetic and professional</p>
                <textarea id="biography-text-edit" rows="4" class="w-100"></textarea>
                <p class="mb-0"><strong>0 / 400 characters</strong></p>  
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateBiography()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalExternalLink" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">External Link</h5>
                <a onclick="closeModal('#modalExternalLink')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Insert an external link</p>
                <input type="text" id="external-link-edit" rows="4" class="w-100 input-modal"/>
                <p class="mt-2"><strong>*compulsory field</strong></p>  
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateExternalLink()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalPortfolioIntro" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Portfolio Intro</h5>
                <a onclick="closeModal('#modalPortfolioIntro')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Write a short info about yourself, try to make it brief and catchy</p>
                <textarea id="portfolio-intro-text-edit" rows="4" class="w-100"></textarea>
                <p class="mb-0"><strong>0 / 400 characters</strong></p>  
            </div>
            <div class="modal-footer">                
                <a onclick="UpdatePortfolioIntro()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalSoftware" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Softwares</h5>
                <a onclick="closeModal('#modalSoftware')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>select a maximum of 10 software that you can check</p>
                <div class="overflow-auto p-3 border-div-grey" style="background-color: white !important; max-height: 400px;">
                    @foreach (var item in Model.UsedSoftwares)
                    {
                        <div class="form-check">
                            <label class="form-check-label" style="cursor: pointer;" for="flexCheckDefault-@item.Code">
                                <strong>@item.Name</strong>
                            </label>
                            @{ var check = @item.Selected ? "checked" : ""; }
                            <input class="form-check-input" type="checkbox" @check value="@item.Code" id="flexCheckDefault-@item.Code" style="float: right !important;">
                        </div>
                        <hr class="hr"/>
                    }
                </div>
                <p class="mt-4"><strong>Didn't find it?</strong> <a class="a-ciano">Contact us</a></p>
                <p class="mb-0"><strong>0 / 10 selected</strong></p>
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateUsedSoftware()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalHardSkill" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Hard Skills</h5>
                <a onclick="closeModal('#modalHardSkill')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Select a maximum of 5 skills which your strongest superpower.</p>
                <div class="overflow-auto p-3 border-div-grey" style="background-color: white !important; max-height: 400px;">
                    @foreach (var item in Model.HardSkills)
                    {
                        <div class="form-check">
                            <label class="form-check-label" style="cursor: pointer;" for="hardSkill-@item.Code">
                                <strong>@item.Name</strong>
                            </label>
                            @{ var check = @item.Selected ? "checked" : ""; }
                            <input class="form-check-input" type="checkbox" @check value="@item.Code" id="hardSkill-@item.Code" style="float: right !important;">
                        </div>
                        <hr class="hr"/>
                    }
                </div>
                <p class="mt-4"><strong>Didn't find it?</strong> <a class="a-ciano">Contact us</a></p>
                <p class="mb-0"><strong>0 / 5 selected</strong></p>
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateHardSkills()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalSoftSkill" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Soft Skills</h5>
                <a onclick="closeModal('#modalSoftSkill')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Select a maximum of 10 skills which you are developing.</p>
                <div class="overflow-auto p-3 border-div-grey" style="background-color: white !important; max-height: 400px;">
                    @foreach (var item in Model.SoftSkills)
                    {
                        <div class="form-check">
                            <label class="form-check-label" style="cursor: pointer;" for="softSkill-@item.Code">
                                <strong>@item.Name</strong>
                            </label>
                            @{ var check = @item.Selected ? "checked" : ""; }
                            <input class="form-check-input" type="checkbox" @check value="@item.Code" id="softSkill-@item.Code" style="float: right !important;">
                        </div>
                        <hr class="hr"/>
                    }
                </div>
                <p class="mt-4"><strong>Didn't find it?</strong> <a class="a-ciano">Contact us</a></p>
                <p class="mb-0"><strong>0 / 10 selected</strong></p>
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateSoftSkills()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalWorkRole" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Role</h5>
                <a onclick="closeModal('#modalWorkRole')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Select a maximum of 5 work categories.</p>
                <div class="overflow-auto p-3 border-div-grey" style="background-color: white !important; max-height: 400px;">
                    @foreach (var item in Model.CategoriesWork)
                    {
                        <div class="form-check">
                            <label class="form-check-label" style="cursor: pointer;" for="categoryWork-@item.Code">
                                <strong>@item.Name</strong>
                            </label>
                            @{ var check = @item.Selected ? "checked" : ""; }
                            <input class="form-check-input" type="checkbox" @check value="@item.Code" id="categoryWork-@item.Code" style="float: right !important;">
                        </div>
                        <hr class="hr"/>
                    }
                </div>
                <p class="mt-4"><strong>Didn't find it?</strong> <a class="a-ciano">Contact us</a></p>
                <p class="mb-0"><strong>0 / 5 selected</strong></p>
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateCategoriesWork()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalLanguageSpoken" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Languages Spoken</h5>
                <a onclick="closeModal('#modalLanguageSpoken')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Select a maximum of 5 languages sppken.</p>
                <div class="overflow-auto p-3 border-div-grey" style="background-color: white !important; max-height: 400px;">
                    @foreach (var item in Model.LanguagesSpoken)
                    {
                        <div class="form-check">
                            <label class="form-check-label" style="cursor: pointer;" for="languageSpoken-@item.Code">
                                <strong>@item.Language</strong>
                            </label>
                            @{ var check = @item.Selected ? "checked" : ""; }
                            <input class="form-check-input" type="checkbox" @check value="@item.Code" id="languageSpoken-@item.Code" style="float: right !important;">
                        </div>
                        <hr class="hr"/>
                    }
                </div>
                <p class="mt-4"><strong>Didn't find it?</strong> <a class="a-ciano">Contact us</a></p>
                <p class="mb-0"><strong>0 / 5 selected</strong></p>
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateLanguagesSpoken()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalInfoToShow" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Info to show</h5>
                <a onclick="closeModal('#modalInfoToShow')"><i class="fa-solid fa-circle-xmark"></i></a>
            </div>
            <div class="modal-body">
                <p>Select info to show in portfolio.</p>
                <div class="overflow-auto p-3 border-div-grey" style="background-color: white !important; max-height: 400px;">
                    @foreach (var item in Model.InfoToShow)
                    {
                        <div class="form-check">
                            <label class="form-check-label" style="cursor: pointer;" for="infoToShow-@item.Code">
                                <strong>@item.Name</strong>
                            </label>
                            @{ var check = @item.Selected ? "checked" : ""; }
                            <input class="form-check-input" type="checkbox" @check value="@item.Code" id="infoToShow-@item.Code" style="float: right !important;">
                        </div>
                        <hr class="hr"/>
                    }
                </div>
                <p class="mt-4"><strong>Didn't find it?</strong> <a class="a-ciano">Contact us</a></p>
                <p class="mb-0"><strong>0 / 5 selected</strong></p>
            </div>
            <div class="modal-footer">                
                <a onclick="UpdateInfoToShow()" class="rounded-pill btn btn-primary" type="submit">save</a>
            </div>
        </div>
    </div>
</div>

@section Scripts
{

    <script>

function UpdateInfoToShow() {
    $('#load-spinner').css("display", "block");
    var codes = JSON.parse('@Html.Raw(Json.Serialize(Model.InfoToShow.Select(s => s.Code.ToString()).ToList()))');
    
    var data = [];
    
    for (const code in codes) {
        if(document.getElementById("infoToShow-"+codes[code]).checked)
            data.push(codes[code])
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateInfoToShow", "Profile")',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}

function UpdateLanguagesSpoken() {
    $('#load-spinner').css("display", "block");
    var codes = JSON.parse('@Html.Raw(Json.Serialize(Model.LanguagesSpoken.Select(s => s.Code.ToString()).ToList()))');
    
    var data = [];
    
    for (const code in codes) {
        if(document.getElementById("languageSpoken-"+codes[code]).checked)
            data.push(codes[code])
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateLanguageSpoken", "Profile")',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}


function UpdateCategoriesWork() {
    $('#load-spinner').css("display", "block");
    var codes = JSON.parse('@Html.Raw(Json.Serialize(Model.CategoriesWork.Select(s => s.Code.ToString()).ToList()))');
    
    var data = [];
    
    for (const code in codes) {
        if(document.getElementById("categoryWork-"+codes[code]).checked)
            data.push(codes[code])
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateCategoriesWork", "Profile")',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}


function UpdateExternalLink() {
    $('#load-spinner').css("display", "block");
    var externalLink = document.getElementById("external-link-edit").value

    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateExternalLink", "Profile")',
        data: JSON.stringify(externalLink),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}


function UpdateHardSkills() {
    $('#load-spinner').css("display", "block");
    var codes = JSON.parse('@Html.Raw(Json.Serialize(Model.HardSkills.Select(s => s.Code.ToString()).ToList()))');
    
    var data = [];
    
    for (const code in codes) {
        if(document.getElementById("hardSkill-"+codes[code]).checked)
            data.push(codes[code])
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateHardSkills", "Profile")',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}

function UpdateSoftSkills() {
    $('#load-spinner').css("display", "block");
    var codes = JSON.parse('@Html.Raw(Json.Serialize(Model.SoftSkills.Select(s => s.Code.ToString()).ToList()))');
    
    var data = [];
    
    for (const code in codes) {
        if(document.getElementById("softSkill-"+codes[code]).checked)
            data.push(codes[code])
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateUsedSoftware", "Profile")',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}


//ADD EDIT BIOGRAPHY
function UpdateBiography(){
    $('#load-spinner').css("display", "block");
    var biography = document.getElementById("biography-text-edit").value

    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateBiography", "Profile")',
        data: JSON.stringify(biography),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}

function UpdateUsedSoftware(){
    $('#load-spinner').css("display", "block");
    var codes = JSON.parse('@Html.Raw(Json.Serialize(Model.UsedSoftwares.Select(s => s.Code.ToString()).ToList()))');
    
    var data = [];
    
    for (const code in codes) {
        if(document.getElementById("flexCheckDefault-"+codes[code]).checked)
            data.push(codes[code])
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateUsedSoftware", "Profile")',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}

function UpdatePortfolioIntro(){
    $('#load-spinner').css("display", "block");
    var introPortfolio = document.getElementById("portfolio-intro-text-edit").value

    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdatePortfolioIntro", "Profile")',
        data: JSON.stringify(introPortfolio),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        success: function (response) {
            if(response.result){
                location.reload()
            }
            $('#load-spinner').css("display", "none");
        },
        error: function (response) {
            $('#load-spinner').css("display", "none");
        }
    })
}
</script>
}