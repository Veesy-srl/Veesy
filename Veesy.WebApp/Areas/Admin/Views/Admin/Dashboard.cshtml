@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Veesy.Presentation.Model.Admin.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
}

@section Style
{
  <style>
    .vertical-center {
      display: flex;
      justify-content: center;
      align-items: center;
    }
  </style>
}
@{
  var nowMonth = DateTime.Now.Month; 
}

<div class="row mb-3">
  <div class="col-sm-2 col-md-2">
    <select id="yearSelect" class="form-select" onchange="ChangeDashboardYear()">
      @for (int date = 2024; date <= DateTime.Now.Year; date++)
      {
        if (Model.Year == date)
        {
          <option selected="selected" value="@date">@date</option>
        }
        else
        {
          <option value="@date">@date</option>
        }
      }
    </select>
  </div>
</div>

<div class="row">
  <div class="col-sm-12 col-md-3">
    <div class="card">
      <div class="card-body">
        <div class="row alig n-items-start">
          <div class="col-8">
            <h5 class="card-title mb-9 fw-semibold">Nr° Users</h5>
            <h4 class="fw-semibold mb-3">@Model.CreatorNumber</h4>
          </div>
          <div class="col-4">
            <div class="d-flex justify-content-end">
              <div class="text-white bg-secondary rounded-circle p-6 d-flex align-items-center justify-content-center">
                <i class="ti ti-users fs-6"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-sm-12 col-md-3">
    <div class="card">
      <div class="card-body">
        <div class="row alig n-items-start">
          <div class="col-8">
            <h5 class="card-title mb-9 fw-semibold">Nr° Media</h5>
            <h4 class="fw-semibold mb-3">@Model.MediaNumber</h4>
          </div>
          <div class="col-4">
            <div class="d-flex justify-content-end">
              <div class="text-white bg-secondary rounded-circle p-6 d-flex align-items-center justify-content-center">
                <i class="ti ti-photo fs-6"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-sm-12 col-md-3">
    <div class="card">
      <div class="card-body">
        <div class="row alig n-items-start">
          <div class="col-8">
            <h5 class="card-title mb-9 fw-semibold"> Paying Users </h5>
            <h4 class="fw-semibold mb-3">@Model.NumberPayingUsers</h4>
          </div>
          <div class="col-4">
            <div class="d-flex justify-content-end">
              <div class="text-white bg-secondary rounded-circle p-6 d-flex align-items-center justify-content-center">
                <i class="ti ti-currency-dollar fs-6"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-sm-12 col-md-3">
    <div class="card">
      <div class="card-body">
        <div class="row alig n-items-start">
          <div class="col-8">
            <h5 class="card-title mb-9 fw-semibold">Portfolios</h5>
            <h4 class="fw-semibold mb-3">@Model.PortfoliosCount.PublishedPortfolios / @(Model.PortfoliosCount.DraftPortfolios + Model.PortfoliosCount.PublishedPortfolios)</h4>
          </div>
          <div class="col-4">
            <div class="d-flex justify-content-end">
              <div class="text-white bg-secondary rounded-circle p-6 d-flex align-items-center justify-content-center">
                <i class="ti ti-photo fs-6"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-lg-4 d-flex align-items-stretch">
    <div class="card w-100">
      <div class="card-body p-4">
        <div class="mb-4">
          <h5 class="card-title fw-semibold mb-0">Last 5 user login</h5>
        </div>
        <ul class="timeline-widget mb-0 position-relative mb-n5">
          @foreach (var item in Model.LastAccess)
          {
            <li class="timeline-item d-flex position-relative overflow-hidden">
              <div class="timeline-time text-dark flex-shrink-0 text-end">@item.LastAccess.ToString("dd/MM HH:mm")</div>
              <div class="timeline-badge-wrap d-flex flex-column align-items-center">
                <span class="timeline-badge border-2 border border-success flex-shrink-0 my-8"></span>
                <span class="timeline-badge-border d-block flex-shrink-0"></span>
              </div>
              <div class="w-100">
                <div class="w-100 timeline-desc fs-3 text-dark mt-n1"><i>@item.MyUser.Fullname</i><br/>@item.City</div>
              </div>
            </li>
          }
        </ul>
      </div>
    </div>
  </div>
  <div class="col-lg-8 d-flex align-items-strech">
    <div class="card w-100">
      <div class="card-body">
        <div class="d-sm-flex d-block align-items-center justify-content-between mb-9">
          <div class="mb-3 mb-sm-0">
            <h5 class="card-title fw-semibold">Session map overview</h5>
          </div>
          <div>
            <select class="form-select" onchange="ChangeMapGraph()" id="month-map">
              <option value="1">January</option>
              <option value="2">February</option>
              <option value="3">March</option>
              <option value="4">April</option>
              <option value="5">May</option>
              <option value="6">June</option>
              <option value="7">July</option>
              <option value="8">August</option>
              <option value="9">September</option>
              <option value="10">October</option>
              <option value="11">November</option>
              <option value="12">December</option>
              <option value="-1">Last 3 month</option>
              <option value="0">All year</option>
            </select>

            <script>
              document.getElementById("month-map").value = @nowMonth
            </script>
          </div>
        </div>
        <div id="chart-map"></div>
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-lg-8 d-flex align-items-strech">
    <div class="card w-100">
      <div class="card-body">
        <div class="d-sm-flex d-block align-items-center justify-content-between mb-9">
          <div class="mb-3 mb-sm-0">
            <h5 class="card-title fw-semibold">Media Overview</h5>
          </div>
          <div>
            <select class="form-select" onchange="ChangeMediaGraph()" id="month-media">
              <option value="1">January</option>
              <option value="2">February</option>
              <option value="3">March</option>
              <option value="4">April</option>
              <option value="5">May</option>
              <option value="6">June</option>
              <option value="7">July</option>
              <option value="8">August</option>
              <option value="9">September</option>
              <option value="10">October</option>
              <option value="11">November</option>
              <option value="12">December</option>
            </select>
            
            <script>
              document.getElementById("month-media").value = @nowMonth
            </script>
          </div>
        </div>
        <div id="chart"></div>
      </div>
    </div>
  </div>
  <div class="col-lg-4 d-flex align-items-stretch">
    <div class="card w-100">
      <div class="card-body p-4">
        <div class="mb-4">
          <h5 class="card-title fw-semibold mb-0">Last 4 today upload</h5>
        </div>
        
          @if (Model.LastMediaUploadDtos.Count == 0)
          {
            <div style="height: 150px;"></div>
            <div class="text-center vertical-center">
              <h5>No medias upload yet</h5>
            </div>
          }
          else
          {
            <ul class="timeline-widget mb-0 position-relative mb-n5">
            @foreach (var item in Model.LastMediaUploadDtos)
            {
              <li class="timeline-item d-flex position-relative overflow-hidden">
                <div class="timeline-time text-dark flex-shrink-0 text-end">@item.Date.ToString("HH:mm")</div>
                <div class="timeline-badge-wrap d-flex flex-column align-items-center">
                  <span class="timeline-badge border-2 border border-success flex-shrink-0 my-8"></span>
                  <span class="timeline-badge-border d-block flex-shrink-0"></span>
                </div>
                <div class="w-100">
                  <div class="w-100 timeline-desc fs-3 text-dark mt-n1"><i>@item.Username</i>  upload</div>
                  <div class="w-100 timeline-desc fs-3 text-dark mt-n1" style="overflow: hidden; white-space: nowrap;text-overflow: ellipsis;"><strong>@item.Filename</strong></div>
                  <div class="w-100 timeline-desc fs-3 text-dark mt-n1">@item.MediaSize Mb</div>
                </div>
              </li>
            }
          </ul>
          }
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-lg-4 d-flex align-items-stretch">
    <div class="card w-100">
      <div class="card-body p-4">
        <div class="mb-4">
          <h5 class="card-title fw-semibold mb-0">Last 5 user registered</h5>
        </div>
        <ul class="timeline-widget mb-0 position-relative mb-n5">
          @foreach (var item in Model.LastUsersCreated)
          {
            <li class="timeline-item d-flex position-relative overflow-hidden">
              <div class="timeline-time text-dark flex-shrink-0 text-end">@item.CreateDate.ToString("dd/MM HH:mm")</div>
              <div class="timeline-badge-wrap d-flex flex-column align-items-center">
                <span class="timeline-badge border-2 border border-success flex-shrink-0 my-8"></span>
                <span class="timeline-badge-border d-block flex-shrink-0"></span>
              </div>
              <div class="w-100">
                <div class="w-100 timeline-desc fs-3 text-dark mt-n1"><i>@item.Fullname</i></div>
              </div>
            </li>
          }
        </ul>
      </div>
    </div>
  </div>
  <div class="col-lg-8 d-flex align-items-strech">
    <div class="card w-100">
      <div class="card-body">
        <div class="d-sm-flex d-block align-items-center justify-content-between mb-9">
          <div class="mb-3 mb-sm-0">
            <h5 class="card-title fw-semibold">Creator Overview</h5>
          </div>
          <div>
            <select class="form-select" onchange="ChangeCreatorGraph()" id="month-creator">
              <option value="1">January</option>
              <option value="2">February</option>
              <option value="3">March</option>
              <option value="4">April</option>
              <option value="5">May</option>
              <option value="6">June</option>
              <option value="7">July</option>
              <option value="8">August</option>
              <option value="9">September</option>
              <option value="10">October</option>
              <option value="11">November</option>
              <option value="12">December</option>
            </select>
            
            <script>
              document.getElementById("month-creator").value = @nowMonth
            </script>
          </div>
        </div>
        <div id="chart-creator"></div>
      </div>
    </div>
  </div>
</div>


@section Scripts
{
  <script src="~/assets/js/dashboard.js"></script>

  <script>
    
    function ChangeDashboardYear(){
      var year = document.getElementById("yearSelect").value;
      window.location.href = '/overview/' + year
    }
    
    function ChangeMediaGraph() {
        $('#load-spinner').css("display", "block");
        var month = document.getElementById("month-media").value
        var year = document.getElementById("yearSelect").value;
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetMediaUploadedByMonth", "Admin")' + "?month=" + month + '&year=' + year,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (response) {
                if(response.result){
                    chart.updateOptions({
                      series: [
                         { name: "Number media", data: response.mediaNumber},
                         { name: "Media size in Mb", data: response.mediaSize},
                      ],
                      xaxis: {
                        categories: response.categories
                      }, 
                      yaxis: {
                        max: response.max
                      }
                    })   
                }
                $('#load-spinner').css("display", "none");
            },
            error: function (response) {
                $('#load-spinner').css("display", "none");
            }
        })
  }
    
    function ChangeCreatorGraph() {
        $('#load-spinner').css("display", "block");
        var month = document.getElementById("month-creator").value
        var year = document.getElementById("yearSelect").value;
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetCreatorsSubscribedByMonth", "Admin")' + "?month=" + month + '&year=' + year,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (response) {
                if(response.result){
                    chart_creator.updateOptions({
                      series: [
                         { name: "Number creators subscribed", data: response.creatorNumber},
                         { name: "Number creators deleted", data: response.creatorNumberDeleted},
                      ],
                      xaxis: {
                        categories: response.categories
                      }, 
                      yaxis: {
                        max: response.max,
                        min: response.min,
                        tickAmount: response.tick
                      }
                    })   
                }
                $('#load-spinner').css("display", "none");
            },
            error: function (response) {
                $('#load-spinner').css("display", "none");
            }
        })
  }
    
    function ChangeMapGraph() {
        $('#load-spinner').css("display", "block");
        var month = document.getElementById("month-map").value
        var year = document.getElementById("yearSelect").value;
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetAccessByMonth", "Admin")' + "?month=" + month + '&year=' + year,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (response) {
                if(response.result){
                  chart_map.updateOptions({
                      series: [
                         { name: "Number creators", data: response.number},
                      ],
                      xaxis: {
                        categories: response.categories
                      }, 
                      yaxis: {
                        max: response.max,
                        tickAmount: 10
                      }
                    })   
                }
                $('#load-spinner').css("display", "none");
            },
            error: function (response) {
                $('#load-spinner').css("display", "none");
            }
        })
  }
    
    @{
      var maxmedia = @Model.MediaOverviewDtos.Count() == 0 ? 5 : @Model.MediaOverviewDtos.Max(s => s.MediaSize);
    }
   
    var chart = {
      series: [
        { name: "Number media", data: JSON.parse('@Html.Raw(Json.Serialize(Model.MediaOverviewDtos.Select(s => s.NumberMedia).ToList()))')},
        { name: "Media size in Mb", data: JSON.parse('@Html.Raw(Json.Serialize(Model.MediaOverviewDtos.Select(s => s.MediaSize).ToList()))') },
      ],
  
      chart: {
        type: "bar",
        height: 345,
        offsetX: -15,
        toolbar: { show: true },
        foreColor: "#adb0bb",
        fontFamily: 'inherit',
        sparkline: { enabled: false },
      },
  
  
      colors: ["#5D87FF", "#49BEFF"],
  
  
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: "35%",
          borderRadius: [6],
          borderRadiusApplication: 'end',
          borderRadiusWhenStacked: 'all'
        },
      },
      markers: { size: 0 },
  
      dataLabels: {
        enabled: false,
      },
  
  
      legend: {
        show: false,
      },
  
  
      grid: {
        borderColor: "rgba(0,0,0,0.1)",
        strokeDashArray: 3,
        xaxis: {
          lines: {
            show: false,
          },
        },
      },
  
      xaxis: {
        type: "category",
        categories: JSON.parse('@Html.Raw(Json.Serialize(Model.MediaOverviewDtos.Select(s => s.Day.ToString()).ToList()))'),
        labels: {
          style: { cssClass: "grey--text lighten-2--text fill-color" },
        },
      },
  
  
      yaxis: {
        show: true,
        min: 0,
        max: @maxmedia,
        tickAmount: 4,
        labels: {
          style: {
            cssClass: "grey--text lighten-2--text fill-color",
          },
        },
      },
      stroke: {
        show: true,
        width: 3,
        lineCap: "butt",
        colors: ["transparent"],
      },
  
  
      tooltip: { theme: "light" },
  
      responsive: [
        {
          breakpoint: 600,
          options: {
            plotOptions: {
              bar: {
                borderRadius: 3,
              }
            },
          }
        }
      ]
  
  
    };
  
    var chart = new ApexCharts(document.querySelector("#chart"), chart);
    
    chart.render();
    
    @{
      var maxCreators = @Model.CreatorOverviewDtos.Count() == 0 ? 5 : @Model.CreatorOverviewDtos.Max(s => s.NumberCreator);
      var maxCreatorsDeleted = @Model.CreatorOverviewDtos.Count() == 0 ? 0 : @Model.CreatorOverviewDtos.Min(s => s.NumberCreatorDeleted);
    }
    var chart_creator = {
      series: [
        { name: "Number creator subscribed", data: JSON.parse('@Html.Raw(Json.Serialize(Model.CreatorOverviewDtos.Select(s => s.NumberCreator).ToList()))')},
        { name: "Number creator deleted", data: JSON.parse('@Html.Raw(Json.Serialize(Model.CreatorOverviewDtos.Select(s => s.NumberCreatorDeleted).ToList()))')},
      ],
  
      chart: {
        type: "bar",
        height: 345,
        offsetX: -15,
        toolbar: { show: true },
        foreColor: "#adb0bb",
        fontFamily: 'inherit',
        sparkline: { enabled: false },
      },
  
  
      colors: ["#5D87FF", "#49BEFF"],
  
  
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: "35%",
          borderRadius: [6],
          borderRadiusApplication: 'end',
          borderRadiusWhenStacked: 'all'
        },
      },
      markers: { size: 0 },
  
      dataLabels: {
        enabled: false,
      },
  
  
      legend: {
        show: false,
      },
  
  
      grid: {
        borderColor: "rgba(0,0,0,0.1)",
        strokeDashArray: 3,
        xaxis: {
          lines: {
            show: false,
          },
        },
      },
  
      xaxis: {
        type: "category",
        categories: JSON.parse('@Html.Raw(Json.Serialize(Model.CreatorOverviewDtos.Select(s => s.Day.ToString()).ToList()))'),
        labels: {
          style: { cssClass: "grey--text lighten-2--text fill-color" },
        },
      },
  
  
      yaxis: {
        show: true,
        min: @maxCreatorsDeleted,
        max: @maxCreators,
        tickAmount: @(maxCreators - maxCreatorsDeleted),
        labels: {
          style: {
            cssClass: "grey--text lighten-2--text fill-color",
          },
        },
      },
      stroke: {
        show: true,
        width: 3,
        lineCap: "butt",
        colors: ["transparent"],
      },
  
  
      tooltip: { theme: "light" },
  
      responsive: [
        {
          breakpoint: 600,
          options: {
            plotOptions: {
              bar: {
                borderRadius: 3,
              }
            },
          }
        }
      ]
  
  
    };
  
    var chart_creator = new ApexCharts(document.querySelector("#chart-creator"), chart_creator);
    chart_creator.render();
    
    @{
      var maxMap = @Model.MapOverviewDtos.Count == 0 ? 5 : @Model.MapOverviewDtos.Max(s => s.Number);
    }
    var chart_map = {
      series: [
        { name: "Number city access", data: JSON.parse('@Html.Raw(Json.Serialize(Model.MapOverviewDtos.Select(s => s.Number).ToList()))')},
      ],
  
      chart: {
        type: "bar",
        height: 345,
        offsetX: -15,
        toolbar: { show: true },
        foreColor: "#adb0bb",
        fontFamily: 'inherit',
        sparkline: { enabled: false },
      },
  
  
      colors: ["#5D87FF", "#49BEFF"],
  
  
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: "35%",
          borderRadius: [6],
          borderRadiusApplication: 'end',
          borderRadiusWhenStacked: 'all'
        },
      },
      markers: { size: 0 },
  
      dataLabels: {
        enabled: false,
      },
  
  
      legend: {
        show: false,
      },
  
  
      grid: {
        borderColor: "rgba(0,0,0,0.1)",
        strokeDashArray: 3,
        xaxis: {
          lines: {
            show: false,
          },
        },
      },
  
      xaxis: {
        type: "category",
        categories: JSON.parse('@Html.Raw(Json.Serialize(Model.MapOverviewDtos.Select(s => s.City.ToString()).ToList()))'),
        labels: {
          style: { cssClass: "grey--text lighten-2--text fill-color" },
        },
      },
  
  
      yaxis: {
        show: true,
        min: 0,
        max: @maxMap,
        tickAmount: 10,
        labels: {
          style: {
            cssClass: "grey--text lighten-2--text fill-color",
          },
        },
      },
      stroke: {
        show: true,
        width: 3,
        lineCap: "butt",
        colors: ["transparent"],
      },
  
  
      tooltip: { theme: "light" },
  
      responsive: [
        {
          breakpoint: 600,
          options: {
            plotOptions: {
              bar: {
                borderRadius: 3,
              }
            },
          }
        }
      ]
  
  
    };
  
    var chart_map = new ApexCharts(document.querySelector("#chart-map"), chart_map);
    chart_map.render();
  
  </script>
}
