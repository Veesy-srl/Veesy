// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Veesy.Domain.Data;

#nullable disable

namespace Veesy.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241122100949_AddItemsInUserSecurity")]
    partial class AddItemsInUserSecurity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Veesy.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Veesy.Domain.Models.CategoryWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesWork");
                });

            modelBuilder.Entity("Veesy.Domain.Models.InfoToShow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InfosToShow");
                });

            modelBuilder.Entity("Veesy.Domain.Models.LanguageSpoken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguagesSpoken");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Log.UserSecurity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ASN")
                        .HasColumnType("int");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContinentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.ToTable("UserSecurities");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Credits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("NestedPortfolioLinks")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NestedPortfolioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MediaCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaCategories");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MediaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaTags");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserCategoryWork", b =>
                {
                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CategoryWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MyUserId", "CategoryWorkId");

                    b.HasIndex("CategoryWorkId");

                    b.ToTable("MyUserCategoriesWork");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserInfoToShow", b =>
                {
                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("InfoToShowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("MyUserId", "InfoToShowId");

                    b.HasIndex("InfoToShowId");

                    b.ToTable("MyUserInfosToShow");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserLanguageSpoken", b =>
                {
                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("LanguageSpokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MyUserId", "LanguageSpokenId");

                    b.HasIndex("LanguageSpokenId");

                    b.ToTable("MyUserLanguagesSpoken");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserRoleWork", b =>
                {
                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoleWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MyUserId", "RoleWorkId");

                    b.HasIndex("RoleWorkId");

                    b.ToTable("MyUserRolesWork");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserSector", b =>
                {
                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MyUserId", "SectorId");

                    b.HasIndex("SectorId");

                    b.ToTable("MyUserSectors");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id", "MyUserId", "SkillId");

                    b.HasIndex("MyUserId");

                    b.HasIndex("SkillId");

                    b.ToTable("MyUserSkills");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserSubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("MyUserSubscriptionPlans");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserUsedSoftware", b =>
                {
                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UsedSoftwareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MyUserId", "UsedSoftwareId");

                    b.HasIndex("UsedSoftwareId");

                    b.ToTable("MyUserUsedSoftwares");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Layout")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Veesy.Domain.Models.PortfolioMedia", b =>
                {
                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("PortfolioId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("PortfolioMedias");
                });

            modelBuilder.Entity("Veesy.Domain.Models.PortfolioSector", b =>
                {
                    b.Property<Guid>("PorfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PorfolioId", "SectorId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("SectorId");

                    b.ToTable("PortfolioSectors");
                });

            modelBuilder.Entity("Veesy.Domain.Models.ReferralLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReferralLinks");
                });

            modelBuilder.Entity("Veesy.Domain.Models.ReferralLinkTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferralLinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReferralLinkId");

                    b.ToTable("ReferralLinkTrackings");
                });

            modelBuilder.Entity("Veesy.Domain.Models.RoleWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RolesWork");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Veesy.Domain.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedMediaNumber")
                        .HasColumnType("int");

                    b.Property<int>("AllowedMegaByte")
                        .HasColumnType("int");

                    b.Property<int>("AllowedPortfolio")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMediaFormatsInclude")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameToShow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("Veesy.Domain.Models.TrackingForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.ToTable("TrackingForms");
                });

            modelBuilder.Entity("Veesy.Domain.Models.UsedSoftware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsedSoftwares");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Biografy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscordDiscriminator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailUpdateProSended")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageSpoken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrginalProfileImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioIntro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SignVeesyContract")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unsubscribe")
                        .HasColumnType("bit");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VeesyPage")
                        .HasColumnType("bit");

                    b.Property<bool>("VisibleInCreatorPage")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("MyUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Veesy.Domain.Models.Log.UserSecurity", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("UserSecurities")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Media", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("Medias")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MediaCategory", b =>
                {
                    b.HasOne("Veesy.Domain.Models.Category", "Category")
                        .WithMany("MediaCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.Media", "Media")
                        .WithMany("MediaCategories")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MediaTag", b =>
                {
                    b.HasOne("Veesy.Domain.Models.Media", "Media")
                        .WithMany("MediaTags")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserCategoryWork", b =>
                {
                    b.HasOne("Veesy.Domain.Models.CategoryWork", "CategoryWork")
                        .WithMany("MyUserCategoriesWork")
                        .HasForeignKey("CategoryWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserCategoriesWork")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryWork");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserInfoToShow", b =>
                {
                    b.HasOne("Veesy.Domain.Models.InfoToShow", "InfoToShow")
                        .WithMany("MyUserInfoToShows")
                        .HasForeignKey("InfoToShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserInfosToShow")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoToShow");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserLanguageSpoken", b =>
                {
                    b.HasOne("Veesy.Domain.Models.LanguageSpoken", "LanguageSpoken")
                        .WithMany("MyUserLanguagesSpoken")
                        .HasForeignKey("LanguageSpokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserLanguagesSpoken")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageSpoken");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserRoleWork", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserRolesWork")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.RoleWork", "RoleWork")
                        .WithMany("MyUserRolesWork")
                        .HasForeignKey("RoleWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");

                    b.Navigation("RoleWork");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserSector", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserSectors")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.Sector", "Sector")
                        .WithMany("MyUserSectors")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserSkill", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserSkills")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.Skill", "Skill")
                        .WithMany("MyUserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserSubscriptionPlan", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserSubscriptionPlans")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("MyUserSubscriptionPlans")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUserUsedSoftware", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("MyUserUsedSoftwares")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.UsedSoftware", "UsedSoftware")
                        .WithMany("MyUserUsedSoftwares")
                        .HasForeignKey("UsedSoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");

                    b.Navigation("UsedSoftware");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Portfolio", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("Portfolios")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Veesy.Domain.Models.PortfolioMedia", b =>
                {
                    b.HasOne("Veesy.Domain.Models.Media", "Media")
                        .WithMany("PortfolioMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.Portfolio", "Portfolio")
                        .WithMany("PortfolioMedias")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Veesy.Domain.Models.PortfolioSector", b =>
                {
                    b.HasOne("Veesy.Domain.Models.Portfolio", "Portfolio")
                        .WithMany("PortfolioSectors")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veesy.Domain.Models.Sector", "Sector")
                        .WithMany("PortfolioSectors")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Veesy.Domain.Models.ReferralLinkTracking", b =>
                {
                    b.HasOne("Veesy.Domain.Models.ReferralLink", "ReferralLink")
                        .WithMany("ReferralLinkTrackings")
                        .HasForeignKey("ReferralLinkId");

                    b.Navigation("ReferralLink");
                });

            modelBuilder.Entity("Veesy.Domain.Models.TrackingForm", b =>
                {
                    b.HasOne("Veesy.Domain.Models.MyUser", "MyUser")
                        .WithMany("TrackingForm")
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Category", b =>
                {
                    b.Navigation("MediaCategories");
                });

            modelBuilder.Entity("Veesy.Domain.Models.CategoryWork", b =>
                {
                    b.Navigation("MyUserCategoriesWork");
                });

            modelBuilder.Entity("Veesy.Domain.Models.InfoToShow", b =>
                {
                    b.Navigation("MyUserInfoToShows");
                });

            modelBuilder.Entity("Veesy.Domain.Models.LanguageSpoken", b =>
                {
                    b.Navigation("MyUserLanguagesSpoken");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Media", b =>
                {
                    b.Navigation("MediaCategories");

                    b.Navigation("MediaTags");

                    b.Navigation("PortfolioMedias");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Portfolio", b =>
                {
                    b.Navigation("PortfolioMedias");

                    b.Navigation("PortfolioSectors");
                });

            modelBuilder.Entity("Veesy.Domain.Models.ReferralLink", b =>
                {
                    b.Navigation("ReferralLinkTrackings");
                });

            modelBuilder.Entity("Veesy.Domain.Models.RoleWork", b =>
                {
                    b.Navigation("MyUserRolesWork");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Sector", b =>
                {
                    b.Navigation("MyUserSectors");

                    b.Navigation("PortfolioSectors");
                });

            modelBuilder.Entity("Veesy.Domain.Models.Skill", b =>
                {
                    b.Navigation("MyUserSkills");
                });

            modelBuilder.Entity("Veesy.Domain.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("MyUserSubscriptionPlans");
                });

            modelBuilder.Entity("Veesy.Domain.Models.UsedSoftware", b =>
                {
                    b.Navigation("MyUserUsedSoftwares");
                });

            modelBuilder.Entity("Veesy.Domain.Models.MyUser", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("MyUserCategoriesWork");

                    b.Navigation("MyUserInfosToShow");

                    b.Navigation("MyUserLanguagesSpoken");

                    b.Navigation("MyUserRolesWork");

                    b.Navigation("MyUserSectors");

                    b.Navigation("MyUserSkills");

                    b.Navigation("MyUserSubscriptionPlans");

                    b.Navigation("MyUserUsedSoftwares");

                    b.Navigation("Portfolios");

                    b.Navigation("TrackingForm");

                    b.Navigation("UserSecurities");
                });
#pragma warning restore 612, 618
        }
    }
}
